name: build

on: [push]

jobs:

  Unix:
    name: ${{matrix.name}} (${{matrix.config}})
    runs-on: ${{matrix.os}}

    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-18.04-gcc-9,
          ubuntu-20.04-gcc-9,
          ubuntu-20.04-gcc-10,
          ubuntu-20.04-clang-8,
          ubuntu-20.04-clang-9,
          ubuntu-20.04-clang-10,
          windows-2019-cl,
          windows-2019-clang-cl,
          windows-2019-clang,
          windows-2019-gcc,
          macos-11.0,
          macos-10.15,
        ]
        config: [Debug, Release]
        include:
          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-20.04-gcc-9
            os: ubuntu-20.04
            compiler: gcc
            version: "9"

          - name: ubuntu-20.04-gcc-10
            os: ubuntu-20.04
            compiler: gcc
            version: "10"

          - name: ubuntu-20.04-clang-8
            os: ubuntu-20.04
            compiler: clang
            version: "8"

          - name: ubuntu-20.04-clang-9
            os: ubuntu-20.04
            compiler: clang
            version: "9"

          - name: ubuntu-20.04-clang-10
            os: ubuntu-20.04
            compiler: clang
            version: "10"

          - name: windows-2019-cl
            os: windows-2019
            compiler: cl
            version: "10"

          - name: windows-2019-clang-cl
            os: windows-2019
            compiler: clang-cl

          - name: windows-2019-clang
            os: windows-2019
            compiler: clang

          - name: windows-2019-gcc
            os: windows-2019
            compiler: gcc

          - name: macos-11.0
            os: macos-11.0

          - name: macOS-10.15
            os: macOS-10.15

    steps:
      - uses: actions/checkout@v2

      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
            sudo apt-get update

            if [ "${{matrix.compiler}}" = "gcc" ]; then
              sudo apt-get install -y g++-${{matrix.version}}
              echo "::set-env name=CC::gcc-${{matrix.version}}"
              echo "::set-env name=CXX::g++-${{matrix.version}}"
            else
              sudo apt-get install -y clang-${{matrix.version}}
              echo "::set-env name=CC::clang-${{matrix.version}}"
              echo "::set-env name=CXX::clang++-${{matrix.version}}"
            fi

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{matrix.config}}

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config ${{matrix.config}}

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: ctest -C ${{matrix.config}}
